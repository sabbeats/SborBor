import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
import asyncio
import csv
from io import StringIO

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")  # <-- –°–Æ–î–ê –í–°–¢–ê–í–ò–ú ID –¢–ê–ë–õ–ò–¶–´ –ü–û–ó–ñ–ï

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]

import json
from io import StringIO
import os

google_key = json.loads(os.getenv('GOOGLE_KEY'))
google_key_file = StringIO(json.dumps(google_key))

creds = ServiceAccountCredentials.from_json_keyfile_dict(google_key, scope)
client = gspread.authorize(creds)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())


# FSM (Finite State Machine) –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
class ArtistForm(StatesGroup):
    name = State()
    telegram = State()
    instagram = State()
    phone = State()
    email = State()
    style = State()
    level = State()
    priority = State()
    comment = State()
class SendBitoForm(StatesGroup):
    name = State()
    beats = State()
    reaction = State()

async def clean_prev_message(message: Message, data: dict, state: FSMContext):
    if "last_bot_message" in data:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=data['last_bot_message'])
        except:
            pass

    try:
        await message.delete()
    except:
        pass


async def clean_chat(message: Message, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
        data = await state.get_data()
        if "last_bot_message" in data:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=data['last_bot_message'])
            except:
                pass

        # –ß–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        await state.clear()

        # –£–¥–∞–ª—è–µ–º –°–ê–ú–£ –ö–û–ú–ê–ù–î–£ –æ—Ç —é–∑–µ—Ä–∞
        await message.delete()

    except:
        pass


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
from aiogram.filters import CommandStart

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ—é –ª–∏—á–Ω—É—é CRM –¥–ª—è –±–∏—Ç–º–µ–π–∫–µ—Ä–∞!\n\n"
                         "üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "‚ûï /add ‚Äì –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞\n"
                         "üìã /mylist ‚Äì –ú–æ—è –±–∞–∑–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤\n"
                         "üîé /search [–∑–∞–ø—Ä–æ—Å] ‚Äì –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ\n"
                         "üìä /stats ‚Äì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                         "üèÜ /top /potential /cold ‚Äì –§–∏–ª—å—Ç—Ä—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º\n"
                         "üìÑ /artist [–∏–º—è] ‚Äì –ö–∞—Ä—Ç–æ—á–∫–∞ –∞—Ä—Ç–∏—Å—Ç–∞\n\n"
                         "üéº –†–∞–±–æ—Ç–∞ —Å –±–∏—Ç–∞–º–∏ –∏ —Å–¥–µ–ª–∫–∞–º–∏:\n"
                         "üì§ /send [–∏–º—è] ‚Äì –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –±–∏—Ç–æ–≤\n"
                         "üí∏ /deal [–∏–º—è —Å—É–º–º–∞] ‚Äì –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫—É\n"
                         "‚è∞ /remindme [–∏–º—è] ‚Äì –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                         "üìû /contact [–∏–º—è] ‚Äì –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç\n\n"
                         "‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n"
                         "üìÅ /export ‚Äì –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É (CSV)\n"
                         "üèÖ /score ‚Äì –ë–∞–ª–ª—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                         "ü™ú /checkpoint [–∏–º—è —ç—Ç–∞–ø] ‚Äì –≠—Ç–∞–ø—ã –ø–æ –∞—Ä—Ç–∏—Å—Ç—É\n"
                         "‚úèÔ∏è /edit [–∏–º—è –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–∏–µ] ‚Äì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n\n"
                         "üí¨ –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏–¥–µ–∏ ‚Äì –ø–∏—à–∏ —Å—é–¥–∞ @sabbeatsmgmt!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞
@dp.message(Command("add"))
async def add_artist(message: Message, state: FSMContext):
    await clean_chat(message, state)

    await state.set_state(ArtistForm.name)
    msg = await message.answer("–ö–∞–∫ –∑–æ–≤—É—Ç –∞—Ä—Ç–∏—Å—Ç–∞?")
    await state.update_data(last_bot_message=msg.message_id)


@dp.message(ArtistForm.name)
async def process_name(message: Message, state: FSMContext):
    data = await state.get_data()
    await clean_prev_message(message, data, state)

    await state.update_data(name=message.text)
    await state.set_state(ArtistForm.telegram)
    msg = await message.answer("–°–∫–∏–Ω—å –µ–≥–æ —Ç–µ–ª–µ–≥—É (@username):")
    await state.update_data(last_bot_message=msg.message_id)


@dp.message(ArtistForm.telegram)
async def process_telegram(message: Message, state: FSMContext):
    data = await state.get_data()
    await clean_prev_message(message, data, state)

    await state.update_data(telegram=message.text)
    await state.set_state(ArtistForm.instagram)
    msg = await message.answer("–°–∫–∏–Ω—å –µ–≥–æ –∏–Ω—Å—Ç—É (@username):")
    await state.update_data(last_bot_message=msg.message_id)


@dp.message(ArtistForm.instagram)
async def process_instagram(message: Message, state: FSMContext):
    data = await state.get_data()
    await clean_prev_message(message, data, state)

    await state.update_data(instagram=message.text)
    await state.set_state(ArtistForm.phone)
    msg = await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?")
    await state.update_data(last_bot_message=msg.message_id)


@dp.message(ArtistForm.phone)
async def process_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    await clean_prev_message(message, data, state)

    await state.update_data(phone=message.text)
    await state.set_state(ArtistForm.email)
    msg = await message.answer("–ü–æ—á—Ç–∞?")
    await state.update_data(last_bot_message=msg.message_id)


@dp.message(ArtistForm.email)
async def process_email(message: Message, state: FSMContext):
    data = await state.get_data()
    await clean_prev_message(message, data, state)

    await state.update_data(email=message.text)
    await state.set_state(ArtistForm.style)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="Yeat"), KeyboardButton(text="Dark")],
                  [KeyboardButton(text="New Jazz"), KeyboardButton(text="Melodic")],
		  [KeyboardButton(text="BoomBap"), KeyboardButton(text="Plugg")],
		  [KeyboardButton(text="Drill"), KeyboardButton(text="West Coast")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    msg = await message.answer("–°—Ç–∏–ª—å?", reply_markup=kb)
    await state.update_data(last_bot_message=msg.message_id)


@dp.message(ArtistForm.style)
async def process_style(message: Message, state: FSMContext):
    data = await state.get_data()
    await clean_prev_message(message, data, state)

    await state.update_data(style=message.text)
    await state.set_state(ArtistForm.level)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–æ–≤–∏—á–æ–∫"), KeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π")],
                  [KeyboardButton(text="–ò–∑–≤–µ—Å—Ç–Ω—ã–π")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    msg = await message.answer("–£—Ä–æ–≤–µ–Ω—å?", reply_markup=kb)
    await state.update_data(last_bot_message=msg.message_id)


@dp.message(ArtistForm.level)
async def process_level(message: Message, state: FSMContext):
    data = await state.get_data()
    await clean_prev_message(message, data, state)

    await state.update_data(level=message.text)
    await state.set_state(ArtistForm.priority)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üî• –¢–û–ü"), KeyboardButton(text="üí∏ –ü–û–¢–ï–ù–¶–ò–ê–õ")],
                  [KeyboardButton(text="‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    msg = await message.answer("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç?", reply_markup=kb)
    await state.update_data(last_bot_message=msg.message_id)


@dp.message(ArtistForm.priority)
async def process_priority(message: Message, state: FSMContext):
    data = await state.get_data()
    await clean_prev_message(message, data, state)

    await state.update_data(priority=message.text)
    await state.set_state(ArtistForm.comment)
    msg = await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç')")
    await state.update_data(last_bot_message=msg.message_id)


@dp.message(ArtistForm.comment)
async def process_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    await clean_prev_message(message, data, state)

    comment = message.text if message.text.lower() != "–Ω–µ—Ç" else ""
    date_added = datetime.now().strftime("%d.%m.%Y")

    row = [
        str(message.from_user.id),  # –¥–æ–±–∞–≤–ª—è–µ–º user_id
        data['name'], data['telegram'], data['instagram'], data['phone'], data['email'],
        data['style'], data['level'], data['priority'], "", "", "", comment, date_added, ""
    ]

    try:
        sheet.append_row(row)
        await message.answer(
            f"‚úÖ –ê—Ä—Ç–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üé§ –ò–º—è: {data['name']}\n"
            f"üì± –¢–µ–ª–µ–≥–∞: {data['telegram']}\n"
            f"üì∏ –ò–Ω—Å—Ç–∞: {data['instagram']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üìß –ü–æ—á—Ç–∞: {data['email']}\n"
            f"üéµ –°—Ç–∏–ª—å: {data['style']}\n"
            f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {data['level']}\n"
            f"üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {data['priority']}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {date_added}"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")

    await state.clear()
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

@dp.message(Command("list"))
async def list_with_buttons(message: Message, state: FSMContext):
    await clean_chat(message, state)

    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏ —Å—Ç–∏–ª—å. –ù–∞–ø—Ä–∏–º–µ—Ä: /list Yeat")
            return

        style = args[1].strip().lower()
        user_id = str(message.from_user.id)

        records = sheet.get_all_values()
        found = False

        for row in records[1:]:
            if row[0] == user_id and row[6].strip().lower() == style:
                found = True

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÑ –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data=f"card_{row[1]}")],
                    [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{row[1]}")],
                    [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∏—Ç—ã", callback_data=f"send_{row[1]}")]
                ])

                await message.answer(f"üé§ {row[1]} (@{row[2]}) ‚Äî {row[7]}", reply_markup=keyboard)

        if not found:
            await message.answer(f"‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ '{style}'.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

ADMIN_ID = "631172327"  # <-- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID (–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–ø–∏—Å–∞–≤ /id –≤ –ª—é–±–æ–º –±–æ—Ç–µ)

@dp.message(Command("alllist"))
async def all_list(message: Message, state: FSMContext):
    await clean_chat(message, state)

    try:
        if str(message.from_user.id) != ADMIN_ID:
            await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        records = sheet.get_all_values()
        result = []

        for row in records[1:]:
            result.append(f"üë§ {row[1]} (@{row[2]}) ‚Äî {row[7]} | üë®‚Äçüíª ID: {row[0]}")

        if result:
            await message.answer("\n".join(result))
        else:
            await message.answer("‚ùå –ë–∞–∑–∞ –ø—É—Å—Ç–∞.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(Command("artist"))
async def show_artist(message: Message, state: FSMContext):
    await clean_chat(message, state)

    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /artist OG Buda")
            return

        name = args[1].strip().lower()
        user_id = str(message.from_user.id)

        records = sheet.get_all_values()
        for row in records[1:]:
            if row[0] == user_id and row[1].strip().lower() == name:
                await message.answer(
                    f"üé§ –ò–º—è: {row[1]}\n"
                    f"üì± –¢–µ–ª–µ–≥–∞: {row[2]}\n"
                    f"üì∏ –ò–Ω—Å—Ç–∞: {row[3]}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {row[4]}\n"
                    f"üìß –ü–æ—á—Ç–∞: {row[5]}\n"
                    f"üéµ –°—Ç–∏–ª—å: {row[6]}\n"
                    f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {row[7]}\n"
                    f"üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {row[8]}\n"
                    f"üì§ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {row[9]}\n"
                    f"üéº –ö–∞–∫–∏–µ –±–∏—Ç—ã: {row[10]}\n"
                    f"üí¨ –†–µ–∞–∫—Ü–∏—è: {row[11]}\n"
                    f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row[12]}\n"
                    f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {row[13]}\n"
                    f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {row[14]}"
                )
                return

        await message.answer(f"‚ùå –ê—Ä—Ç–∏—Å—Ç —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–≤–æ–µ–π –±–∞–∑–µ.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")



@dp.message(Command("send"))
async def start_send_beats(message: Message, state: FSMContext):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /send OG Buda")
        return

    name = args[1].strip()

    await state.update_data(name=name)
    await state.set_state(SendBitoForm.beats)
    await message.answer(f"üéº –ö–∞–∫–∏–µ –±–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª {name}? (–≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏—è)")


@dp.message(SendBitoForm.beats)
async def process_beats(message: Message, state: FSMContext):
    await state.update_data(beats=message.text)
    await state.set_state(SendBitoForm.reaction)
    await message.answer("üí¨ –ö–∞–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è? (—á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –∞—Ä—Ç–∏—Å—Ç?)")


@dp.message(SendBitoForm.reaction)
async def process_reaction(message: Message, state: FSMContext):
    data = await state.get_data()
    await clean_prev_message(message, data, state)

    name = data['name']
    beats = data['beats']
    reaction = message.text
    user_id = str(message.from_user.id)

    date_now = datetime.now().strftime("%d.%m.%Y")

    records = sheet.get_all_values()

    for i, row in enumerate(records[1:], start=2):
        if row[0] == user_id and row[1].strip().lower() == name.strip().lower():
            sheet.update(f"I{i}", [[date_now]])  # –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            sheet.update(f"J{i}", [[beats]])     # –ö–∞–∫–∏–µ –±–∏—Ç—ã
            sheet.update(f"K{i}", [[reaction]]) # –†–µ–∞–∫—Ü–∏—è
            sheet.update(f"N{i}", [[date_now]]) # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
            await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {row[1]}\nüì§ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {date_now}\nüéº –ë–∏—Ç—ã: {beats}\nüí¨ –†–µ–∞–∫—Ü–∏—è: {reaction}")
            await state.clear()
            return

    await message.answer(f"‚ùå –û—à–∏–±–∫–∞, –∞—Ä—Ç–∏—Å—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()

@dp.message(Command("remind"))
async def remind_contacts(message: Message):
    try:
        records = sheet.get_all_values()
        now = datetime.now()
        result = []

        for row in records[1:]:
            last_contact = row[13].strip()
            if last_contact:
                last_contact_date = datetime.strptime(last_contact, "%d.%m.%Y")
                if now - last_contact_date > timedelta(days=30):
                    result.append(f"üé§ {row[0]} ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {last_contact}")

        if result:
            await message.answer("üîî –ê—Ä—Ç–∏—Å—Ç—ã, —Å –∫–µ–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª—Å—è:\n" + "\n".join(result))
        else:
            await message.answer("‚úÖ –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–≤–µ–∂–∏–µ!")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        await message.answer("–ö–æ–º–∞–Ω–¥—ã:\n"
                         "/add - –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞\n"
                         "/mylist - –ú–æ–∏ –∞—Ä—Ç–∏—Å—Ç—ã\n"
                         "/search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫\n"
                         "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                         "/top /potential /cold - –§–∏–ª—å—Ç—Ä—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º\n"
                         "/artist [–∏–º—è] - –ö–∞—Ä—Ç–æ—á–∫–∞ –∞—Ä—Ç–∏—Å—Ç–∞\n"
                         "/send [–∏–º—è] - –§–∏–∫—Å–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
                         "/deal [–∏–º—è —Å—É–º–º–∞] - –§–∏–∫—Å–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏\n"
                         "/remindme [–∏–º—è] - –ñ–¥—ë—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                         "/export - –í—ã–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã\n"
                         "/score - –ë–∞–ª–ª—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                         "/contact [–∏–º—è] - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç\n"
                         "/checkpoint [–∏–º—è —ç—Ç–∞–ø] - –≠—Ç–∞–ø—ã\n"
                         "/edit [–∏–º—è –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–∏–µ] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    )

@dp.message(Command("edit"))
async def edit_artist(message: Message):
    try:
        args = message.text.split(maxsplit=3)
        if len(args) < 4:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n/edit OG Buda –ø–æ—á—Ç–∞ ivan@gmail.com")
            return

        name = args[1].strip().lower()
        field = args[2].strip().lower()
        new_value = args[3].strip()
        user_id = str(message.from_user.id)

        field_map = {
            '–ø–æ—á—Ç–∞': 5,
            '—Ç–µ–ª–µ—Ñ–æ–Ω': 4,
            '—Ç–µ–ª–µ–≥–∞': 2,
            '–∏–Ω—Å—Ç–∞': 3,
            '—Å—Ç–∏–ª—å': 6,
            '—É—Ä–æ–≤–µ–Ω—å': 7,
            '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç': 8,
            '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': 12
        }

        if field not in field_map:
            await message.answer("‚ùå –ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: –ø–æ—á—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω, —Ç–µ–ª–µ–≥–∞, –∏–Ω—Å—Ç–∞, —Å—Ç–∏–ª—å, —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            return

        column_index = field_map[field]
        records = sheet.get_all_values()

        for i, row in enumerate(records[1:], start=2):
            if row[0] == user_id and row[1].strip().lower() == name:
                sheet.update_cell(i, column_index + 1, new_value)  # +1, —Ç–∞–∫ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1
                await message.answer(f"‚úÖ –ü–æ–ª–µ '{field}' –∞—Ä—Ç–∏—Å—Ç–∞ '{row[1]}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_value}")
                return

        await message.answer(f"‚ùå –ê—Ä—Ç–∏—Å—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–≤–æ–µ–π –±–∞–∑–µ.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
@dp.message(Command("mylist"))
async def mylist(message: Message, state: FSMContext):
    await clean_chat(message, state)
    user_id = str(message.from_user.id)
    records = sheet.get_all_values()
    result = [f"üé§ {row[1]} (@{row[2]}) ‚Äî {row[7]}" for row in records[1:] if row[0] == user_id]

    await message.answer("\n".join(result) if result else "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤.")

@dp.message(Command("export"))
async def export_database(message: Message, state: FSMContext):
    await clean_chat(message, state)

    try:
        records = sheet.get_all_values()

        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = StringIO()
        writer = csv.writer(output)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
        for row in records:
            writer.writerow(row)

        output.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(
            document=types.BufferedInputFile(
                output.getvalue().encode(),
                filename=f"artists_base_{datetime.now().strftime('%d_%m_%Y')}.csv"
            ),
            caption="üìÑ –í–∞—à–∞ –±–∞–∑–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(Command("remindme"))
async def set_reminder(message: Message, state: FSMContext):
    await clean_chat(message, state)

    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /remindme OG Buda")
            return

        name = args[1].strip().lower()
        user_id = str(message.from_user.id)
        records = sheet.get_all_values()

        for i, row in enumerate(records[1:], start=2):
            if row[0] == user_id and row[1].strip().lower() == name:
                sheet.update(f"O{i}", [["–î–∞"]])  # –ö–æ–ª–æ–Ω–∫–∞ –ñ–¥—ë—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await message.answer(f"‚úÖ –ê—Ä—Ç–∏—Å—Ç—É {row[1]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å '–ñ–¥—ë—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'")
                return

        await message.answer(f"‚ùå –ê—Ä—Ç–∏—Å—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(Command("deal"))
async def set_deal(message: Message, state: FSMContext):
    await clean_chat(message, state)

    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –∏ —Å—É–º–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä: /deal OG Buda 3000")
            return

        name = args[1].strip().lower()
        amount = args[2].strip()
        user_id = str(message.from_user.id)
        date_now = datetime.now().strftime("%d.%m.%Y")

        records = sheet.get_all_values()

        for i, row in enumerate(records[1:], start=2):
            if row[0] == user_id and row[1].strip().lower() == name:
                sheet.update(f"P{i}", [[amount]])  # –ö–æ–ª–æ–Ω–∫–∞ –°–¥–µ–ª–∫–∞
                sheet.update(f"N{i}", [[date_now]])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
                await message.answer(f"‚úÖ –°–¥–µ–ª–∫–∞ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {row[1]}")
                return

        await message.answer(f"‚ùå –ê—Ä—Ç–∏—Å—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("contact"))
async def update_contact(message: Message, state: FSMContext):
    await clean_chat(message, state)

    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /contact OG Buda")
            return

        name = args[1].strip().lower()
        user_id = str(message.from_user.id)
        date_now = datetime.now().strftime("%d.%m.%Y")

        records = sheet.get_all_values()

        for i, row in enumerate(records[1:], start=2):
            if row[0] == user_id and row[1].strip().lower() == name:
                sheet.update(f"N{i}", [[date_now]])
                await message.answer(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç —Å {row[1]} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {date_now}")
                return

        await message.answer(f"‚ùå –ê—Ä—Ç–∏—Å—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(Command("score"))
async def score(message: Message, state: FSMContext):
    await clean_chat(message, state)

    try:
        user_id = str(message.from_user.id)
        records = sheet.get_all_values()

        add_count = 0
        send_count = 0
        deal_count = 0

        for row in records[1:]:
            if row[0] == user_id:
                if row[1]:  # –ò–º—è –∞—Ä—Ç–∏—Å—Ç–∞
                    add_count += 1
                if row[9]:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                    send_count += 1
                if row[15]:  # –°–¥–µ–ª–∫–∞
                    deal_count += 1

        score = (add_count * 1) + (send_count * 3) + (deal_count * 10)

        await message.answer(f"üìä –¢–≤–æ–π —Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
                             f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {add_count}\n"
                             f"–û—Ç–ø—Ä–∞–≤–æ–∫ –±–∏—Ç–æ–≤: {send_count}\n"
                             f"–ó–∞–∫—Ä—ã—Ç–æ —Å–¥–µ–ª–æ–∫: {deal_count}\n\n"
                             f"–û–±—â–∏–π —Å—á—ë—Ç: {score} –±–∞–ª–ª–æ–≤")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")



@dp.message(Command("checkpoint"))
async def set_checkpoint(message: Message, state: FSMContext):
    await clean_chat(message, state)

    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.answer("‚ùå –£–∫–∞–∂–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –∏ —ç—Ç–∞–ø (1-4). –ù–∞–ø—Ä–∏–º–µ—Ä: /checkpoint OG Buda 2")
            return

        name = args[1].strip().lower()
        stage = args[2].strip()
        user_id = str(message.from_user.id)

        records = sheet.get_all_values()

        for i, row in enumerate(records[1:], start=2):
            if row[0] == user_id and row[1].strip().lower() == name:
                sheet.update(f"Q{i}", [[stage]])
                await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —ç—Ç–∞–ø {stage} –¥–ª—è {row[1]}")
                return

        await message.answer(f"‚ùå –ê—Ä—Ç–∏—Å—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")




@dp.message(Command("stats"))
async def stats(message: Message, state: FSMContext):
    await clean_chat(message, state)
    user_id = str(message.from_user.id)
    records = sheet.get_all_values()

    total, top, potential, cold = 0, 0, 0, 0
    for row in records[1:]:
        if row[0] == user_id:
            total += 1
            if row[8] == "üî• –¢–û–ü":
                top += 1
            elif row[8] == "üí∏ –ü–û–¢–ï–ù–¶–ò–ê–õ":
                potential += 1
            elif row[8] == "‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô":
                cold += 1

    await message.answer(f"üìä –í—Å–µ–≥–æ: {total}\nüî• –¢–û–ü: {top}\nüí∏ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {potential}\n‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ: {cold}")


async def filter_by_priority(message, state, priority):
    await clean_chat(message, state)
    user_id = str(message.from_user.id)
    records = sheet.get_all_values()
    result = [f"üé§ {row[1]} (@{row[2]}) ‚Äî {row[7]}" for row in records[1:] if row[0] == user_id and row[8] == priority]

    await message.answer("\n".join(result) if result else f"‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority}")


@dp.message(Command("top"))
async def top(message: Message, state: FSMContext):
    await filter_by_priority(message, state, "üî• –¢–û–ü")


@dp.message(Command("potential"))
async def potential(message: Message, state: FSMContext):
    await filter_by_priority(message, state, "üí∏ –ü–û–¢–ï–ù–¶–ò–ê–õ")


@dp.message(Command("cold"))
async def cold(message: Message, state: FSMContext):
    await filter_by_priority(message, state, "‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô")


@dp.message(Command("artist"))
async def artist(message: Message, state: FSMContext):
    await clean_chat(message, state)
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞.")
        return

    user_id = str(message.from_user.id)
    name = args[1].strip().lower()
    records = sheet.get_all_values()

    for row in records[1:]:
        if row[0] == user_id and row[1].strip().lower() == name:
            await message.answer(
                f"üé§ –ò–º—è: {row[1]}\n"
                f"üì± –¢–µ–ª–µ–≥–∞: <a href='https://t.me/{row[2][1:]}'>{row[2]}</a>\n"
                f"üì∏ –ò–Ω—Å—Ç–∞: <a href='https://instagram.com/{row[3][1:]}'>{row[3]}</a>\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {row[4]}\n"
                f"üìß –ü–æ—á—Ç–∞: {row[5]}\n"
                f"üéµ –°—Ç–∏–ª—å: {row[6]}\n"
                f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {row[7]}\n"
                f"üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {row[8]}\n",
                parse_mode=ParseMode.HTML)
            return

    await message.answer("‚ùå –ê—Ä—Ç–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def reminder_task():
    while True:
        await asyncio.sleep(60 * 60 * 24)
        try:
            now = datetime.now()
            records = sheet.get_all_values()
            for row in records[1:]:
                last_contact = row[14].strip()
                if last_contact:
                    date = datetime.strptime(last_contact, "%d.%m.%Y")
                    if (now - date).days > 30:
                        await bot.send_message(row[0], f"‚ö†Ô∏è –¢—ã –¥–∞–≤–Ω–æ –Ω–µ –ø–∏—Å–∞–ª {row[1]} (—Å {last_contact})")
        except Exception as e:
            print(f"–†–µ–º–∞–π–Ω–¥–µ—Ä –æ—à–∏–±–∫–∞: {e}")

@dp.callback_query(lambda c: c.data.startswith('card_'))
async def card_callback(callback: types.CallbackQuery):
    name = callback.data.split("_")[1]
    await callback.message.answer(f"/artist {name}")
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith('edit_'))
async def edit_callback(callback: types.CallbackQuery):
    name = callback.data.split("_")[1]
    await callback.message.answer(f"/edit {name} [–ø–æ–ª–µ] [–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]")
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith('send_'))
async def send_callback(callback: types.CallbackQuery):
    name = callback.data.split("_")[1]
    await callback.message.answer(f"/send {name}")
    await callback.answer()


async def on_startup():
    global sheet
    sheet = client.open_by_key("1AFQY1SYlsczjEnBOLS6390qhEsKHVBMiqBMwdUyVaAI").sheet1
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Google –¢–∞–±–ª–∏—Ü–µ!")

if __name__ == "__main__":
    import asyncio
    asyncio.run(on_startup())
    asyncio.run(dp.start_polling(bot))

